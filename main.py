import os
import time
import telebot
from telebot import types

TOKEN = "8297975325:AAGArbLcJE9dSsMxoZmIzxx41wjBbKwg54I"
ADMIN_IDS = [733841797, 1336042507, 394592253, 527797499, 6334390799, 771177410]
# , 394592253, 1336042507, 6334390799, 527797499, 771177410
# 6334390799, 1336042507, 527797499, 771177410, 394592253, 733841797
bot = telebot.TeleBot(TOKEN)

complexes = [
    # "¬´–ö–≤–∞—Ä–ª–∞–ª –õ–∏–ø–∫–∏-2¬ª - –≤—É–ª. –ú–∞–∑–µ–ø–∏ 168",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –õ–µ–≤–∞–¥–∞¬ª - –Ü–≤–∞—Å—é–∫–∞,19",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì—ñ–º–Ω–∞–∑—ñ–π–Ω–∏–π-1¬ª - –ì–æ—Ä–±–∞—á–µ–≤—Å—å–∫–æ–≥–æ, 14–ì",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì–∞–ª–∏—Ü—å–∫–∏–π¬ª - –≤—É–ª. –•—ñ–º—ñ–∫—ñ–≤ 35, 37, 39",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì–∞–ª–∏—Ü—å–∫–∏–π 2¬ª - –≤—É–ª. –•—ñ–º—ñ–∫—ñ–≤, 43",
    "¬´–õ–µ–≤–∞–¥–∞ –î–µ–º‚Äô—è–Ω—ñ–≤ –õ–∞–∑¬ª - –≤—É–ª. –î–µ–º º—è–Ω—ñ–≤ –õ–∞–∑ 35, 37, 39",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì–∞–ª–∏—á–∞–Ω–∫–∞¬ª - –≤—É–ª. –ì–∞–ª–∏—Ü—å–∫–∞ 59–ê",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì—ñ–º–Ω–∞–∑—ñ–π–Ω–∏–π-2¬ª - –≤—É–ª. –ì–æ—Ä–±–∞—á–µ–≤—Å—å–∫–æ–≥–æ 14–ï",
]

address_files = {
    # "¬´–ö–≤–∞—Ä–ª–∞–ª –õ–∏–ø–∫–∏-2¬ª": "kvartal_lipki_2.txt",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì–∞–ª–∏—Ü—å–∫–∏–π¬ª": "kvartal_galytskyi.txt",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì–∞–ª–∏—Ü—å–∫–∏–π 2¬ª": "kvartal_galytskyi_2.txt",
    "¬´–õ–µ–≤–∞–¥–∞ –î–µ–º‚Äô—è–Ω—ñ–≤ –õ–∞–∑¬ª": "levada_demianiv_laz.txt",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì–∞–ª–∏—á–∞–Ω–∫–∞¬ª": "kvartal_halychanka.txt",
    "¬´–ö–≤–∞—Ä—Ç–∞–ª –ì—ñ–º–Ω–∞–∑—ñ–π–Ω–∏–π¬ª": "kvartal_himnaziinyi.txt",
}

user_data = {}

def ensure_user(chat_id):
    if chat_id not in user_data:
        user_data[chat_id] = {}

def input_validation(chat_id):
    data = user_data.get(chat_id, {})
    if not data.get("complex"):
        send_complex_menu(chat_id)
        return False
    return True


def send_complex_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for c in complexes:
        markup.add(types.KeyboardButton(c))
    bot.send_message(chat_id, "üè¢ –û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –∂–∏—Ç–ª–æ–≤–∏–π –∫–æ–º–ø–ª–µ–∫—Å", reply_markup=markup)

def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ê–∫—Ç—É–∞–ª—å–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", "–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫")
    markup.add("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", "–ó–∞–≥–∞–ª—å–Ω–æ–±—É–¥–∏–Ω–∫–æ–≤–∏–π –±–æ—Ä–≥")
    markup.add("–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
    markup.add("–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É üîô")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=markup)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    ensure_user(message.chat.id)
    send_complex_menu(message.chat.id)


@bot.message_handler(func=lambda message: message.text in complexes)
def choose_complex(message):
    ensure_user(message.chat.id)

    if " - " in message.text:
        name, address = message.text.split(" - ", 1)
    else:
        name, address = message.text, ""

    user_data[message.chat.id]["complex"] = name.strip()
    user_data[message.chat.id]["address"] = address.strip()

    bot.send_message(
        message.chat.id,
        f"üè† –í–∞—à–∞ –∞–¥—Ä–µ—Å–∞: *{name.strip()}\n{address.strip()}*",
        parse_mode="Markdown",
        # reply_markup=types.ReplyKeyboardRemove()
    )

    user_data[message.chat.id]["waiting_pib"] = True
    bot.send_message(message.chat.id, "üëã –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:")

MENU_BUTTONS = [
    "–ê–∫—Ç—É–∞–ª—å–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", "–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫",
    "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", "–ó–∞–≥–∞–ª—å–Ω–æ–±—É–¥–∏–Ω–∫–æ–≤–∏–π –±–æ—Ä–≥",
    "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏", "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É üîô"
]

IGNORE_BUTTONS_DURING_INPUT = ["–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É üîô", "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏"]

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("waiting_pib", False))
def get_pib(message): 
    if message.text in MENU_BUTTONS:
        if message.text == "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É üîô":
            send_complex_menu(message.chat.id)
            return
        if message.text == "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏":
            contacts(message)
            return

        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñüòä")
        return
    
    user_data[message.chat.id]["pib"] = message.text
    user_data[message.chat.id]["waiting_pib"] = False
    user_data[message.chat.id]["waiting_exact_address"] = True

    bot.send_message(message.chat.id, "üö™ –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à—É —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É —Ç–∞ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("waiting_exact_address", False))
def get_exact_address(message):
    if message.text in MENU_BUTTONS:
        if message.text == "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É üîô":
            send_complex_menu(message.chat.id)
            return
        if message.text == "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏":
            contacts(message)
            return

        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñüòä")
        return
    
    user_data[message.chat.id]["exact_address"] = message.text
    user_data[message.chat.id]["waiting_exact_address"] = False
    user_data[message.chat.id]["waiting_phone"] = True

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    markup.add(btn)
    bot.send_message(
        message.chat.id,
        "‚òéÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=markup
    )


@bot.message_handler(content_types=['contact'])
def get_contact(message):
    if user_data.get(message.chat.id, {}).get("waiting_phone", False):
        user_data[message.chat.id]["phone"] = message.contact.phone_number
        user_data[message.chat.id]["waiting_phone"] = False

        bot.send_message(
            message.chat.id,
            "‚úÖ –î—è–∫—É—î–º–æ!\n–í–∞—à—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n–¢–µ–ø–µ—Ä –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞ üì≤",
            # reply_markup=types.ReplyKeyboardRemove()
        )
        send_main_menu(message.chat.id)


@bot.message_handler(func=lambda message: message.text == "–ú—ñ–π —Ä–∞—Ö—É–Ω–æ–∫")
def show_account(message):
    # if not input_validation(message.chat.id):
    #     return

    data = user_data.get(message.chat.id, {})
    pib = data.get("pib", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")
    exact_address = data.get("exact_address", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")
    phone = data.get("phone", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")

    admin_text = (
        f"üì• *–ó–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–∞—Ö—É–Ω–∫—É:*\n\n"
        f"*–ü–Ü–ë:* {pib}\n"
        f"*–ñ–ö:* {data.get('complex','-')}\n"
        f"*–ê–¥—Ä–µ—Å–∞:* {data.get('address','-')}, {exact_address}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"*Telegram ID:* {message.chat.id}\n"
        f"*Username:* @{message.from_user.username or '–ù–µ–º–∞—î'}"
    )
    for admin_id in ADMIN_IDS:
      bot.send_message(admin_id, admin_text, parse_mode="Markdown")

    bot.send_message(
        message.chat.id,
        "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ. –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –º–∏ –Ω–∞–¥—ñ—à–ª–µ–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫.",
    )


@bot.message_handler(func=lambda message: message.text == "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è")
def leave_complaint(message):
    if not user_data.get(message.chat.id, {}).get("complex"):
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É üè†")
        return
    user_data[message.chat.id]["waiting_complaint"] = True
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("waiting_complaint", False))
def complaint_text(message):
    # if not input_validation(message.chat.id):
    #     return
    if message.text in MENU_BUTTONS:
        if message.text == "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É üîô":
            send_complex_menu(message.chat.id)
            return
        if message.text == "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏":
            contacts(message)
            return
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –æ–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è üè†")
        return
        
    user_data[message.chat.id]["waiting_complaint"] = False
    text = message.text

    data = user_data.get(message.chat.id, {})
    pib = data.get("pib", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")
    exact_address = data.get("exact_address", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")
    phone = data.get("phone", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")

    user_data[message.chat.id]["last_complaint_text"] = text
    user_data[message.chat.id]["waiting_photo"] = True

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–¢–∞–∫ üì∏", "–ù—ñ ‚ùå")
    bot.send_message(message.chat.id, "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ –¥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è?", reply_markup=markup)


# @bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("waiting_photo", False))
# def complaint_photo_choice(message):
#     user_data[message.chat.id]["waiting_photo"] = False
#     choice = message.text

#     if choice == "–¢–∞–∫ üì∏":
#         user_data[message.chat.id]["waiting_photo_upload"] = True
#         bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ:", reply_markup=types.ReplyKeyboardRemove())
#     else:
#         send_complaint_to_admin(message.chat.id)
#         bot.send_message(message.chat.id, "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
#         send_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("waiting_photo", False))
def complaint_photo_choice(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id, {})

    user_data[chat_id]["waiting_photo"] = False

    choice = message.text.strip()

    if choice == "–¢–∞–∫ üì∏":
        user_data[chat_id]["waiting_photo_upload"] = True
        bot.send_message(
            chat_id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    elif choice == "–ù—ñ ‚ùå":
        send_complaint_to_admin(chat_id)
        bot.send_message(
            chat_id,
            "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        send_main_menu(chat_id)
        return

    bot.send_message(
        chat_id,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ üëá"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–¢–∞–∫ üì∏", "–ù—ñ ‚ùå")
    bot.send_message(chat_id, "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ –¥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è?", reply_markup=markup)

    user_data[chat_id]["waiting_photo"] = True

@bot.message_handler(content_types=['photo'])
def complaint_photo_upload(message):
    if user_data.get(message.chat.id, {}).get("waiting_photo_upload", False):
        user_data[message.chat.id]["waiting_photo_upload"] = False
        send_complaint_to_admin(message.chat.id, photo_id=message.photo[-1].file_id)
        bot.send_message(message.chat.id, "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        send_main_menu(message.chat.id)


def send_complaint_to_admin(chat_id, photo_id=None):
    data = user_data.get(chat_id, {})
    text = data.get("last_complaint_text", "-")
    pib = data.get("pib", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")
    exact_address = data.get("exact_address", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")
    phone = data.get("phone", "–ù–µ –≤–≤–µ–¥–µ–Ω–æ")

    admin_text = (
        f"üì• *–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è:*\n\n"
        f"*–ü–Ü–ë:* {pib}\n"
        f"*–ñ–ö:* {data.get('complex','-')}\n"
        f"*–ê–¥—Ä–µ—Å–∞:* {data.get('address','-')}, {exact_address}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"*Telegram ID:* {chat_id}\n"
        f"*Username:* @{data.get('username','–ù–µ–º–∞—î')}\n\n"
        f"*–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏:* {text}"
    )

    for admin_id in ADMIN_IDS:
        if photo_id:
            bot.send_photo(admin_id, photo_id, caption=admin_text, parse_mode="Markdown")
        else:
            bot.send_message(admin_id, admin_text, parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "–ê–∫—Ç—É–∞–ª—å–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
def announcements(message):
    complex_name = user_data.get(message.chat.id, {}).get("complex")
    if not complex_name:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ü—é –∫–æ–º–∞–Ω–¥—É /start, —â–æ–± –æ–±—Ä–∞—Ç–∏ –∞–¥—Ä–µ—Å—Éüòä")
        return

    base_name = complex_name.split(" - ")[0].strip()
    file_name = address_files.get(base_name)

    if not file_name:
        bot.send_message(message.chat.id, "üì≠ –û–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏ –ø–æ–∫–∏ –Ω–µ–º–∞—î.\n–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ üòä")
        return

    file_path = os.path.join("advertisement", file_name) 

    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read().strip()
        if content:
            bot.send_message(message.chat.id, f"üì¢ *–ê–∫—Ç—É–∞–ª—å–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:*\n\n{content}", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "üì≠ –û–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏ –ø–æ–∫–∏ –Ω–µ–º–∞—î.\n–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ üòä")
    else:
        bot.send_message(message.chat.id, "üì≠ –û–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏ –ø–æ–∫–∏ –Ω–µ–º–∞—î.\n–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ üòä")


@bot.message_handler(func=lambda message: message.text == "–ó–∞–≥–∞–ª—å–Ω–æ–±—É–¥–∏–Ω–∫–æ–≤–∏–π –±–æ—Ä–≥")
def house_debt(message):
    complex_name = user_data.get(message.chat.id, {}).get("complex")
    if not complex_name:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ü—é –∫–æ–º–∞–Ω–¥—É /start, —â–æ–± –æ–±—Ä–∞—Ç–∏ –∞–¥—Ä–µ—Å—Éüòä")
        return

    base_name = complex_name.split(" - ")[0].strip()
    file_name = address_files.get(base_name)

    if not file_name:
        bot.send_message(message.chat.id, "üì≠ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ä–≥ –¥–ª—è –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏ –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
        return

    file_path = os.path.join("debt", file_name)

    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read().strip()
        if content:
            bot.send_message(message.chat.id, f"üí∞ *–ó–∞–≥–∞–ª—å–Ω–æ–±—É–¥–∏–Ω–∫–æ–≤–∏–π –±–æ—Ä–≥:*\n\n{content}", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "üì≠ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ä–≥ –¥–ª—è –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏ –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
    else:
        bot.send_message(message.chat.id, "üì≠ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ä–≥ –¥–ª—è –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–∏ –ø–æ–∫–∏ –Ω–µ–º–∞—î.")


@bot.message_handler(func=lambda message: message.text == "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
def contacts(message):
    contacts_text = (
        "üìç *–ê–¥—Ä–µ—Å–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –æ—Ñ—ñ—Å—É:*\n"
        "–≤—É–ª. –•—ñ–º—ñ–∫—ñ–≤, 37\n–º. –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫\n\n"
        "‚Äî‚Äî\n\n"
        "üè¢ *–ñ–ï–û –ü–ü \"–†—ñ–¥–Ω–∏–π –¥—ñ–º\":*\n"
        "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è: +38 (066) 368 33 26, \n"
        "+38 (050) 197 24 85\n"
        "–¢–µ—Ö–≤—ñ–¥–¥—ñ–ª: +38 (067) 128 37 38"
    )
    markup = types.InlineKeyboardMarkup()
    # markup.add(types.InlineKeyboardButton("üìò Facebook", url="https://www.facebook.com/%D0%9B%D0%B5%D0%B2%D0%B0%D0%B4%D0%B0-213141559222862/"))
    # markup.add(types.InlineKeyboardButton("üìπ YouTube", url="https://www.youtube.com/channel/UCBxxdQ10jUh2EXib2ibcUKA?disable_polymer=true"))
    # markup.add(types.InlineKeyboardButton("üì∏ Instagram", url="https://www.instagram.com/levada.if?igsh=MWhqa2xwMHUzNGRkNw=="))
    bot.send_message(message.chat.id, contacts_text, parse_mode="Markdown", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É üîô")
def change_address(message):
    send_complex_menu(message.chat.id)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    data = user_data.get(message.chat.id, {})

    if data.get("waiting_pib", False):
        get_pib(message)
        return
    if data.get("waiting_exact_address", False):
        get_exact_address(message)
        return
    if data.get("waiting_complaint", False):
        complaint_text(message)
        return

    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é üëá")

if __name__ == "__main__":
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=5)
        except Exception as e:
            print(f"Polling –ø–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(5)




















