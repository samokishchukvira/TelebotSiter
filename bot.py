import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import psycopg2
import openpyxl
from datetime import datetime
from config import TOKEN, DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT
import random
from aiogram.types import FSInputFile

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

conn = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT)
cursor = conn.cursor()

user_data = {}

menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –î–æ—Å—Ç—É–ø–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è"), KeyboardButton(text="üó£Ô∏è –ü—Ä–æ –Ω–∞—Å")],
        [KeyboardButton(text="‚ùóÔ∏è –ó–∞–ø–∏—Ç–∞–Ω–Ω—è?"), KeyboardButton(text="üîÆ –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è")]
    ],
    resize_keyboard=True
)

course_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üíª SMM"), KeyboardButton(text="üì± –ë–ª–æ–≥–µ—Ä—Å—Ç–≤–æ"), KeyboardButton(text="üñ•Ô∏è –¢–∞—Ä–≥–µ—Ç")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

course_info_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìñ –ö–æ—Ä–æ—Ç–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"), KeyboardButton(text="‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

registration_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start(message: types.Message):
    cursor.execute("INSERT INTO users (tg_id, username, full_name) VALUES (%s, %s, %s) ON CONFLICT (tg_id) DO NOTHING",
                   (message.from_user.id, message.from_user.username, message.from_user.full_name))
    conn.commit()
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=menu)

@router.message(F.text == "üó£Ô∏è –ü—Ä–æ –Ω–∞—Å")
async def about_us(message: types.Message):
    await message.answer("‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –Ω–∞—Å –Ω–∞ —Å–∞–π—Ç—ñ: https://www.siter.in.ua/")

@router.message(F.text == "‚ùóÔ∏è –ó–∞–ø–∏—Ç–∞–Ω–Ω—è?")
async def ask_question(message: types.Message):
    await message.answer("üìû –Ø–∫—â–æ —É –≤–∞—Å —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: +38 050 714 45 47")

@router.message(F.text == "üîÆ –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è")
async def prediction(message: types.Message):
    predictions = [
        "–°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤—ñ–π –¥–µ–Ω—å! ‚ú®",
        "–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ—î–º—É –±–æ—Ü—ñ! üçÄ",
        "–ë—É–¥—å —Å–º—ñ–ª–∏–≤–∏–º(–æ—é), —ñ —Ç–∏ –ø–µ—Ä–µ–º–æ–∂–µ—à! üèÜ",
        "–¢–µ–±–µ —á–µ–∫–∞—î –ø—Ä–∏—î–º–Ω–∏–π —Å—é—Ä–ø—Ä–∏–∑! üéÅ",
        "–ó–æ—Å–µ—Ä–µ–¥—å—Å—è –Ω–∞ —Å–≤–æ—ó—Ö —Ü—ñ–ª—è—Ö ‚Äì —É—Å–ø—ñ—Ö –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏! üöÄ"
    ]
    await message.answer(random.choice(predictions))

@router.message(F.text == "üìö –î–æ—Å—Ç—É–ø–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è")
async def show_courses(message: types.Message):
    await message.answer("üéì –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫—É—Ä—Å–∏:", reply_markup=course_menu)

@router.message(F.text.in_(["üíª SMM", "üì± –ë–ª–æ–≥–µ—Ä—Å—Ç–≤–æ", "üñ•Ô∏è –¢–∞—Ä–≥–µ—Ç"]))
async def course_selection(message: types.Message):
    course_names = {"üíª SMM": "SMM", "üì± –ë–ª–æ–≥–µ—Ä—Å—Ç–≤–æ": "–ë–ª–æ–≥–µ—Ä—Å—Ç–≤–æ", "üñ•Ô∏è –¢–∞—Ä–≥–µ—Ç": "–¢–∞—Ä–≥–µ—Ç"}
    course = course_names[message.text]
    user_data[message.from_user.id] = {"course": course}
    await message.answer(f"–ö—É—Ä—Å: **{course}**\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=course_info_menu)

@router.message(F.text == "üìñ –ö–æ—Ä–æ—Ç–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
async def show_course_info(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å!", reply_markup=course_menu)
        return
    course = user_data[user_id]["course"]
    course_info = {
        "SMM": "–í–∏–≤—á–µ–Ω–Ω—è –æ—Å–Ω–æ–≤ SMM —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.",
        "–ë–ª–æ–≥–µ—Ä—Å—Ç–≤–æ": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –±—Ä–µ–Ω–¥—É –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö.",
        "–¢–∞—Ä–≥–µ—Ç": "–û—Å–Ω–æ–≤–∏ —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–æ—ó —Ä–µ–∫–ª–∞–º–∏ —Ç–∞ —ó—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è."
    }
    await message.answer(f"üìñ –ö—É—Ä—Å **{course}**\n{course_info[course]}", reply_markup=course_info_menu)

@router.message(F.text == "‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
async def start_registration(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å!", reply_markup=course_menu)
        return
    await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:")

@router.message(lambda message: message.from_user.id in user_data and "full_name" not in user_data[message.from_user.id])
async def save_full_name(message: types.Message):
    user_data[message.from_user.id]["full_name"] = message.text
    await message.answer("üìû –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=registration_menu)


@router.message(lambda message: message.contact and message.from_user.id in user_data)
async def save_phone(message: types.Message):
    user = user_data[message.from_user.id]
    full_name = user["full_name"]
    phone = message.contact.phone_number
    course = user["course"]

    cursor.execute("INSERT INTO enrollments (user_id, course_name, full_name, phone_number) VALUES (%s, %s, %s, %s)",
                   (message.from_user.id, course, full_name, phone))
    conn.commit()
    del user_data[message.from_user.id]

    await message.answer(f"‚úÖ {full_name}, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∫—É—Ä—Å **{course}**!\nüéÅ –Ø–∫ –ø–æ–¥–∞—Ä—É–Ω–æ–∫, –æ—Å—å –≤–∞—à –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≥–∞–π–¥:", reply_markup=menu)
    
    try:
        guide = FSInputFile("guide.pdf")  
        await bot.send_document(message.chat.id, guide)
        await message.answer("üìû –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!")
    except FileNotFoundError:
        await message.answer("‚ùå –í–∏–±–∞—á—Ç–µ, –≥–∞–π–¥ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())